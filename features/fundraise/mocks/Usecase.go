// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	dtos "raihpeduli/features/fundraise/dtos"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: newFundraise, userID, file
func (_m *Usecase) Create(newFundraise dtos.InputFundraise, userID int, file multipart.File) (*dtos.ResFundraise, []string, error) {
	ret := _m.Called(newFundraise, userID, file)

	var r0 *dtos.ResFundraise
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func(dtos.InputFundraise, int, multipart.File) (*dtos.ResFundraise, []string, error)); ok {
		return rf(newFundraise, userID, file)
	}
	if rf, ok := ret.Get(0).(func(dtos.InputFundraise, int, multipart.File) *dtos.ResFundraise); ok {
		r0 = rf(newFundraise, userID, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ResFundraise)
		}
	}

	if rf, ok := ret.Get(1).(func(dtos.InputFundraise, int, multipart.File) []string); ok {
		r1 = rf(newFundraise, userID, file)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(dtos.InputFundraise, int, multipart.File) error); ok {
		r2 = rf(newFundraise, userID, file)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindAll provides a mock function with given fields: pagination, searchAndFilter, ownerID, suffix
func (_m *Usecase) FindAll(pagination dtos.Pagination, searchAndFilter dtos.SearchAndFilter, ownerID int, suffix string) ([]dtos.ResFundraise, int64) {
	ret := _m.Called(pagination, searchAndFilter, ownerID, suffix)

	var r0 []dtos.ResFundraise
	var r1 int64
	if rf, ok := ret.Get(0).(func(dtos.Pagination, dtos.SearchAndFilter, int, string) ([]dtos.ResFundraise, int64)); ok {
		return rf(pagination, searchAndFilter, ownerID, suffix)
	}
	if rf, ok := ret.Get(0).(func(dtos.Pagination, dtos.SearchAndFilter, int, string) []dtos.ResFundraise); ok {
		r0 = rf(pagination, searchAndFilter, ownerID, suffix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.ResFundraise)
		}
	}

	if rf, ok := ret.Get(1).(func(dtos.Pagination, dtos.SearchAndFilter, int, string) int64); ok {
		r1 = rf(pagination, searchAndFilter, ownerID, suffix)
	} else {
		r1 = ret.Get(1).(int64)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: fundraiseID, ownerID
func (_m *Usecase) FindByID(fundraiseID int, ownerID int) *dtos.FundraiseDetails {
	ret := _m.Called(fundraiseID, ownerID)

	var r0 *dtos.FundraiseDetails
	if rf, ok := ret.Get(0).(func(int, int) *dtos.FundraiseDetails); ok {
		r0 = rf(fundraiseID, ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.FundraiseDetails)
		}
	}

	return r0
}

// Modify provides a mock function with given fields: fundraiseData, file, oldData
func (_m *Usecase) Modify(fundraiseData dtos.InputFundraise, file multipart.File, oldData dtos.FundraiseDetails) ([]string, error) {
	ret := _m.Called(fundraiseData, file, oldData)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(dtos.InputFundraise, multipart.File, dtos.FundraiseDetails) ([]string, error)); ok {
		return rf(fundraiseData, file, oldData)
	}
	if rf, ok := ret.Get(0).(func(dtos.InputFundraise, multipart.File, dtos.FundraiseDetails) []string); ok {
		r0 = rf(fundraiseData, file, oldData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(dtos.InputFundraise, multipart.File, dtos.FundraiseDetails) error); ok {
		r1 = rf(fundraiseData, file, oldData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyStatus provides a mock function with given fields: fundraiseData, oldData
func (_m *Usecase) ModifyStatus(fundraiseData dtos.InputFundraiseStatus, oldData dtos.FundraiseDetails) ([]string, error) {
	ret := _m.Called(fundraiseData, oldData)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(dtos.InputFundraiseStatus, dtos.FundraiseDetails) ([]string, error)); ok {
		return rf(fundraiseData, oldData)
	}
	if rf, ok := ret.Get(0).(func(dtos.InputFundraiseStatus, dtos.FundraiseDetails) []string); ok {
		r0 = rf(fundraiseData, oldData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(dtos.InputFundraiseStatus, dtos.FundraiseDetails) error); ok {
		r1 = rf(fundraiseData, oldData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: fundraiseID, oldData
func (_m *Usecase) Remove(fundraiseID int, oldData dtos.FundraiseDetails) error {
	ret := _m.Called(fundraiseID, oldData)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, dtos.FundraiseDetails) error); ok {
		r0 = rf(fundraiseID, oldData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

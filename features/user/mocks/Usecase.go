// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	dtos "raihpeduli/features/user/dtos"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// AddPersonalization provides a mock function with given fields: userID, data
func (_m *Usecase) AddPersonalization(userID int, data dtos.InputPersonalization) error {
	ret := _m.Called(userID, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, dtos.InputPersonalization) error); ok {
		r0 = rf(userID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangePassword provides a mock function with given fields: changePassword, userID
func (_m *Usecase) ChangePassword(changePassword dtos.ChangePassword, userID int) ([]string, error) {
	ret := _m.Called(changePassword, userID)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(dtos.ChangePassword, int) ([]string, error)); ok {
		return rf(changePassword, userID)
	}
	if rf, ok := ret.Get(0).(func(dtos.ChangePassword, int) []string); ok {
		r0 = rf(changePassword, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(dtos.ChangePassword, int) error); ok {
		r1 = rf(changePassword, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckPassword provides a mock function with given fields: checkPassword, userID
func (_m *Usecase) CheckPassword(checkPassword dtos.CheckPassword, userID int) ([]string, error) {
	ret := _m.Called(checkPassword, userID)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(dtos.CheckPassword, int) ([]string, error)); ok {
		return rf(checkPassword, userID)
	}
	if rf, ok := ret.Get(0).(func(dtos.CheckPassword, int) []string); ok {
		r0 = rf(checkPassword, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(dtos.CheckPassword, int) error); ok {
		r1 = rf(checkPassword, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: newUser
func (_m *Usecase) Create(newUser dtos.InputUser) (*dtos.ResUser, []string, error) {
	ret := _m.Called(newUser)

	var r0 *dtos.ResUser
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func(dtos.InputUser) (*dtos.ResUser, []string, error)); ok {
		return rf(newUser)
	}
	if rf, ok := ret.Get(0).(func(dtos.InputUser) *dtos.ResUser); ok {
		r0 = rf(newUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ResUser)
		}
	}

	if rf, ok := ret.Get(1).(func(dtos.InputUser) []string); ok {
		r1 = rf(newUser)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(dtos.InputUser) error); ok {
		r2 = rf(newUser)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindAll provides a mock function with given fields: searchAndFilter
func (_m *Usecase) FindAll(searchAndFilter dtos.SearchAndFilter) ([]dtos.ResUser, int64) {
	ret := _m.Called(searchAndFilter)

	var r0 []dtos.ResUser
	var r1 int64
	if rf, ok := ret.Get(0).(func(dtos.SearchAndFilter) ([]dtos.ResUser, int64)); ok {
		return rf(searchAndFilter)
	}
	if rf, ok := ret.Get(0).(func(dtos.SearchAndFilter) []dtos.ResUser); ok {
		r0 = rf(searchAndFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.ResUser)
		}
	}

	if rf, ok := ret.Get(1).(func(dtos.SearchAndFilter) int64); ok {
		r1 = rf(searchAndFilter)
	} else {
		r1 = ret.Get(1).(int64)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: customerID
func (_m *Usecase) FindByID(customerID int) *dtos.ResUser {
	ret := _m.Called(customerID)

	var r0 *dtos.ResUser
	if rf, ok := ret.Get(0).(func(int) *dtos.ResUser); ok {
		r0 = rf(customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ResUser)
		}
	}

	return r0
}

// ForgetPassword provides a mock function with given fields: email
func (_m *Usecase) ForgetPassword(email dtos.ForgetPassword) error {
	ret := _m.Called(email)

	var r0 error
	if rf, ok := ret.Get(0).(func(dtos.ForgetPassword) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Modify provides a mock function with given fields: customerData, file, oldData
func (_m *Usecase) Modify(customerData dtos.InputUpdate, file multipart.File, oldData dtos.ResUser) (error, []string) {
	ret := _m.Called(customerData, file, oldData)

	var r0 error
	var r1 []string
	if rf, ok := ret.Get(0).(func(dtos.InputUpdate, multipart.File, dtos.ResUser) (error, []string)); ok {
		return rf(customerData, file, oldData)
	}
	if rf, ok := ret.Get(0).(func(dtos.InputUpdate, multipart.File, dtos.ResUser) error); ok {
		r0 = rf(customerData, file, oldData)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(dtos.InputUpdate, multipart.File, dtos.ResUser) []string); ok {
		r1 = rf(customerData, file, oldData)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	return r0, r1
}

// ModifyProfilePicture provides a mock function with given fields: file, oldData
func (_m *Usecase) ModifyProfilePicture(file dtos.InputUpdateProfilePicture, oldData dtos.ResUser) (error, []string) {
	ret := _m.Called(file, oldData)

	var r0 error
	var r1 []string
	if rf, ok := ret.Get(0).(func(dtos.InputUpdateProfilePicture, dtos.ResUser) (error, []string)); ok {
		return rf(file, oldData)
	}
	if rf, ok := ret.Get(0).(func(dtos.InputUpdateProfilePicture, dtos.ResUser) error); ok {
		r0 = rf(file, oldData)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(dtos.InputUpdateProfilePicture, dtos.ResUser) []string); ok {
		r1 = rf(file, oldData)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	return r0, r1
}

// MyProfile provides a mock function with given fields: userID
func (_m *Usecase) MyProfile(userID int) *dtos.ResMyProfile {
	ret := _m.Called(userID)

	var r0 *dtos.ResMyProfile
	if rf, ok := ret.Get(0).(func(int) *dtos.ResMyProfile); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ResMyProfile)
		}
	}

	return r0
}

// Remove provides a mock function with given fields: customerID
func (_m *Usecase) Remove(customerID int) error {
	ret := _m.Called(customerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetPassword provides a mock function with given fields: newData
func (_m *Usecase) ResetPassword(newData dtos.ResetPassword) error {
	ret := _m.Called(newData)

	var r0 error
	if rf, ok := ret.Get(0).(func(dtos.ResetPassword) error); ok {
		r0 = rf(newData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateVerification provides a mock function with given fields: verificationKey
func (_m *Usecase) ValidateVerification(verificationKey string) bool {
	ret := _m.Called(verificationKey)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(verificationKey)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// VerifyOTP provides a mock function with given fields: verificationKey
func (_m *Usecase) VerifyOTP(verificationKey string) string {
	ret := _m.Called(verificationKey)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(verificationKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

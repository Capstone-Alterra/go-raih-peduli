// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	user "raihpeduli/features/user"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: customerID
func (_m *Repository) DeleteByID(customerID int) int64 {
	ret := _m.Called(customerID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int) int64); ok {
		r0 = rf(customerID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// DeleteFile provides a mock function with given fields: fileName
func (_m *Repository) DeleteFile(fileName string) error {
	ret := _m.Called(fileName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTotalData provides a mock function with given fields:
func (_m *Repository) GetTotalData() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// InsertUser provides a mock function with given fields: newUser
func (_m *Repository) InsertUser(newUser *user.User) (*user.User, error) {
	ret := _m.Called(newUser)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*user.User) (*user.User, error)); ok {
		return rf(newUser)
	}
	if rf, ok := ret.Get(0).(func(*user.User) *user.User); ok {
		r0 = rf(newUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*user.User) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertVerification provides a mock function with given fields: email, verificationKey
func (_m *Repository) InsertVerification(email string, verificationKey string) error {
	ret := _m.Called(email, verificationKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(email, verificationKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Paginate provides a mock function with given fields: page, size
func (_m *Repository) Paginate(page int, size int) []user.User {
	ret := _m.Called(page, size)

	var r0 []user.User
	if rf, ok := ret.Get(0).(func(int, int) []user.User); ok {
		r0 = rf(page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	return r0
}

// SelectByEmail provides a mock function with given fields: email
func (_m *Repository) SelectByEmail(email string) (*user.User, error) {
	ret := _m.Called(email)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*user.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *user.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByID provides a mock function with given fields: customerID
func (_m *Repository) SelectByID(customerID int) *user.User {
	ret := _m.Called(customerID)

	var r0 *user.User
	if rf, ok := ret.Get(0).(func(int) *user.User); ok {
		r0 = rf(customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	return r0
}

// SendOTPByEmail provides a mock function with given fields: email, otp
func (_m *Repository) SendOTPByEmail(email string, otp string) error {
	ret := _m.Called(email, otp)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(email, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: _a0
func (_m *Repository) UpdateUser(_a0 user.User) int64 {
	ret := _m.Called(_a0)

	var r0 int64
	if rf, ok := ret.Get(0).(func(user.User) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// UploadFile provides a mock function with given fields: file, oldFilename
func (_m *Repository) UploadFile(file multipart.File, oldFilename string) (string, error) {
	ret := _m.Called(file, oldFilename)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(multipart.File, string) (string, error)); ok {
		return rf(file, oldFilename)
	}
	if rf, ok := ret.Get(0).(func(multipart.File, string) string); ok {
		r0 = rf(file, oldFilename)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(multipart.File, string) error); ok {
		r1 = rf(file, oldFilename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateVerification provides a mock function with given fields: verificationKey
func (_m *Repository) ValidateVerification(verificationKey string) string {
	ret := _m.Called(verificationKey)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(verificationKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	history "raihpeduli/features/history"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetTotalVolunteersByVacancyID provides a mock function with given fields: vacancyID
func (_m *Repository) GetTotalVolunteersByVacancyID(vacancyID int) int64 {
	ret := _m.Called(vacancyID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int) int64); ok {
		r0 = rf(vacancyID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// HistoryFundraiseCreatedByUser provides a mock function with given fields: userID
func (_m *Repository) HistoryFundraiseCreatedByUser(userID int) ([]history.Fundraise, error) {
	ret := _m.Called(userID)

	var r0 []history.Fundraise
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]history.Fundraise, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []history.Fundraise); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]history.Fundraise)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HistoryUserTransaction provides a mock function with given fields: userID
func (_m *Repository) HistoryUserTransaction(userID int) ([]history.Transaction, error) {
	ret := _m.Called(userID)

	var r0 []history.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]history.Transaction, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []history.Transaction); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]history.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HistoryVolunteerVacanciesCreatedByUser provides a mock function with given fields: userID
func (_m *Repository) HistoryVolunteerVacanciesCreatedByUser(userID int) ([]history.VolunteerVacancies, error) {
	ret := _m.Called(userID)

	var r0 []history.VolunteerVacancies
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]history.VolunteerVacancies, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []history.VolunteerVacancies); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]history.VolunteerVacancies)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HistoryVolunteerVacanciesRegisterByUser provides a mock function with given fields: userID
func (_m *Repository) HistoryVolunteerVacanciesRegisterByUser(userID int) ([]history.Volunteer, error) {
	ret := _m.Called(userID)

	var r0 []history.Volunteer
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]history.Volunteer, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []history.Volunteer); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]history.Volunteer)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectBookmarkedFundraiseID provides a mock function with given fields: ownerID
func (_m *Repository) SelectBookmarkedFundraiseID(ownerID int) (map[int]string, error) {
	ret := _m.Called(ownerID)

	var r0 map[int]string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (map[int]string, error)); ok {
		return rf(ownerID)
	}
	if rf, ok := ret.Get(0).(func(int) map[int]string); ok {
		r0 = rf(ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectBookmarkedVacancyID provides a mock function with given fields: ownerID
func (_m *Repository) SelectBookmarkedVacancyID(ownerID int) (map[int]string, error) {
	ret := _m.Called(ownerID)

	var r0 map[int]string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (map[int]string, error)); ok {
		return rf(ownerID)
	}
	if rf, ok := ret.Get(0).(func(int) map[int]string); ok {
		r0 = rf(ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalFundAcquired provides a mock function with given fields: fundraiseID
func (_m *Repository) TotalFundAcquired(fundraiseID int) (int32, error) {
	ret := _m.Called(fundraiseID)

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int32, error)); ok {
		return rf(fundraiseID)
	}
	if rf, ok := ret.Get(0).(func(int) int32); ok {
		r0 = rf(fundraiseID)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(fundraiseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	dtos "raihpeduli/features/history/dtos"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// FindAllHistoryFundraiseCreatedByUser provides a mock function with given fields: userID
func (_m *Usecase) FindAllHistoryFundraiseCreatedByUser(userID int) ([]dtos.ResFundraisesHistory, error) {
	ret := _m.Called(userID)

	var r0 []dtos.ResFundraisesHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]dtos.ResFundraisesHistory, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []dtos.ResFundraisesHistory); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.ResFundraisesHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllHistoryUserTransaction provides a mock function with given fields: userID
func (_m *Usecase) FindAllHistoryUserTransaction(userID int) ([]dtos.ResTransactionHistory, error) {
	ret := _m.Called(userID)

	var r0 []dtos.ResTransactionHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]dtos.ResTransactionHistory, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []dtos.ResTransactionHistory); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.ResTransactionHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllHistoryVolunteerVacanciesCreatedByUser provides a mock function with given fields: userID
func (_m *Usecase) FindAllHistoryVolunteerVacanciesCreatedByUser(userID int) ([]dtos.ResVolunteersVacancyHistory, error) {
	ret := _m.Called(userID)

	var r0 []dtos.ResVolunteersVacancyHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]dtos.ResVolunteersVacancyHistory, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []dtos.ResVolunteersVacancyHistory); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.ResVolunteersVacancyHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllHistoryVolunteerVacanciesRegisterByUser provides a mock function with given fields: userID
func (_m *Usecase) FindAllHistoryVolunteerVacanciesRegisterByUser(userID int) ([]dtos.ResRegistrantVacancyHistory, error) {
	ret := _m.Called(userID)

	var r0 []dtos.ResRegistrantVacancyHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]dtos.ResRegistrantVacancyHistory, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []dtos.ResRegistrantVacancyHistory); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.ResRegistrantVacancyHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

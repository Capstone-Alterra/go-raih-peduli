// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	chatbot "raihpeduli/features/chatbot"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteByUserID provides a mock function with given fields: chatbotID
func (_m *Repository) DeleteByUserID(chatbotID int) error {
	ret := _m.Called(chatbotID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(chatbotID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadQuestionNPrompts provides a mock function with given fields:
func (_m *Repository) ReadQuestionNPrompts() (map[string]string, error) {
	ret := _m.Called()

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveChat provides a mock function with given fields: questionNReply, userID
func (_m *Repository) SaveChat(questionNReply chatbot.QuestionAndReply, userID int) error {
	ret := _m.Called(questionNReply, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(chatbot.QuestionAndReply, int) error); ok {
		r0 = rf(questionNReply, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectByUserID provides a mock function with given fields: chatbotID
func (_m *Repository) SelectByUserID(chatbotID int) (*chatbot.ChatHistory, error) {
	ret := _m.Called(chatbotID)

	var r0 *chatbot.ChatHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*chatbot.ChatHistory, error)); ok {
		return rf(chatbotID)
	}
	if rf, ok := ret.Get(0).(func(int) *chatbot.ChatHistory); ok {
		r0 = rf(chatbotID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chatbot.ChatHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(chatbotID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectUserByID provides a mock function with given fields: userID
func (_m *Repository) SelectUserByID(userID int) (*chatbot.User, error) {
	ret := _m.Called(userID)

	var r0 *chatbot.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*chatbot.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) *chatbot.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chatbot.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

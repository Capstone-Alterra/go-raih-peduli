// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	dtos "raihpeduli/features/transaction/dtos"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: userID, newTransaction
func (_m *Usecase) Create(userID int, newTransaction dtos.InputTransaction) (*dtos.ResTransaction, error, []string) {
	ret := _m.Called(userID, newTransaction)

	var r0 *dtos.ResTransaction
	var r1 error
	var r2 []string
	if rf, ok := ret.Get(0).(func(int, dtos.InputTransaction) (*dtos.ResTransaction, error, []string)); ok {
		return rf(userID, newTransaction)
	}
	if rf, ok := ret.Get(0).(func(int, dtos.InputTransaction) *dtos.ResTransaction); ok {
		r0 = rf(userID, newTransaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ResTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int, dtos.InputTransaction) error); ok {
		r1 = rf(userID, newTransaction)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(int, dtos.InputTransaction) []string); ok {
		r2 = rf(userID, newTransaction)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]string)
		}
	}

	return r0, r1, r2
}

// FindAll provides a mock function with given fields: page, size, roleID, userID, keyword
func (_m *Usecase) FindAll(page int, size int, roleID int, userID int, keyword string) ([]dtos.ResTransaction, int64) {
	ret := _m.Called(page, size, roleID, userID, keyword)

	var r0 []dtos.ResTransaction
	var r1 int64
	if rf, ok := ret.Get(0).(func(int, int, int, int, string) ([]dtos.ResTransaction, int64)); ok {
		return rf(page, size, roleID, userID, keyword)
	}
	if rf, ok := ret.Get(0).(func(int, int, int, int, string) []dtos.ResTransaction); ok {
		r0 = rf(page, size, roleID, userID, keyword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.ResTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int, int, string) int64); ok {
		r1 = rf(page, size, roleID, userID, keyword)
	} else {
		r1 = ret.Get(1).(int64)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: transactionID
func (_m *Usecase) FindByID(transactionID int) *dtos.ResTransaction {
	ret := _m.Called(transactionID)

	var r0 *dtos.ResTransaction
	if rf, ok := ret.Get(0).(func(int) *dtos.ResTransaction); ok {
		r0 = rf(transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ResTransaction)
		}
	}

	return r0
}

// Modify provides a mock function with given fields: transactionData, transactionID
func (_m *Usecase) Modify(transactionData dtos.InputTransaction, transactionID int) bool {
	ret := _m.Called(transactionData, transactionID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(dtos.InputTransaction, int) bool); ok {
		r0 = rf(transactionData, transactionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Notifications provides a mock function with given fields: notificationPayload
func (_m *Usecase) Notifications(notificationPayload map[string]interface{}) error {
	ret := _m.Called(notificationPayload)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(notificationPayload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: transactionID
func (_m *Usecase) Remove(transactionID int) bool {
	ret := _m.Called(transactionID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(transactionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

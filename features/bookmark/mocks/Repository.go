// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	bookmark "raihpeduli/features/bookmark"
	dtos "raihpeduli/features/bookmark/dtos"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: bookmarkID
func (_m *Repository) DeleteByID(bookmarkID string) (int, error) {
	ret := _m.Called(bookmarkID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(bookmarkID)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(bookmarkID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bookmarkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: document
func (_m *Repository) Insert(document interface{}) (bool, error) {
	ret := _m.Called(document)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (bool, error)); ok {
		return rf(document)
	}
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(document)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Paginate provides a mock function with given fields: size, ownerID
func (_m *Repository) Paginate(size int, ownerID int) (*dtos.ResBookmark, error) {
	ret := _m.Called(size, ownerID)

	var r0 *dtos.ResBookmark
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*dtos.ResBookmark, error)); ok {
		return rf(size, ownerID)
	}
	if rf, ok := ret.Get(0).(func(int, int) *dtos.ResBookmark); ok {
		r0 = rf(size, ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ResBookmark)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(size, ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByID provides a mock function with given fields: bookmarkID
func (_m *Repository) SelectByID(bookmarkID string) (*primitive.M, error) {
	ret := _m.Called(bookmarkID)

	var r0 *primitive.M
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*primitive.M, error)); ok {
		return rf(bookmarkID)
	}
	if rf, ok := ret.Get(0).(func(string) *primitive.M); ok {
		r0 = rf(bookmarkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*primitive.M)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bookmarkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByPostAndOwnerID provides a mock function with given fields: postID, ownerID, postType
func (_m *Repository) SelectByPostAndOwnerID(postID int, ownerID int, postType string) (*primitive.M, error) {
	ret := _m.Called(postID, ownerID, postType)

	var r0 *primitive.M
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) (*primitive.M, error)); ok {
		return rf(postID, ownerID, postType)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) *primitive.M); ok {
		r0 = rf(postID, ownerID, postType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*primitive.M)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(postID, ownerID, postType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectFundraiseByID provides a mock function with given fields: fundraiseID
func (_m *Repository) SelectFundraiseByID(fundraiseID int) (*bookmark.Fundraise, error) {
	ret := _m.Called(fundraiseID)

	var r0 *bookmark.Fundraise
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*bookmark.Fundraise, error)); ok {
		return rf(fundraiseID)
	}
	if rf, ok := ret.Get(0).(func(int) *bookmark.Fundraise); ok {
		r0 = rf(fundraiseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bookmark.Fundraise)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(fundraiseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectNewsByID provides a mock function with given fields: newsID
func (_m *Repository) SelectNewsByID(newsID int) (*bookmark.News, error) {
	ret := _m.Called(newsID)

	var r0 *bookmark.News
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*bookmark.News, error)); ok {
		return rf(newsID)
	}
	if rf, ok := ret.Get(0).(func(int) *bookmark.News); ok {
		r0 = rf(newsID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bookmark.News)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(newsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectVolunteerByID provides a mock function with given fields: volunteerID
func (_m *Repository) SelectVolunteerByID(volunteerID int) (*bookmark.VolunteerVacancy, error) {
	ret := _m.Called(volunteerID)

	var r0 *bookmark.VolunteerVacancy
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*bookmark.VolunteerVacancy, error)); ok {
		return rf(volunteerID)
	}
	if rf, ok := ret.Get(0).(func(int) *bookmark.VolunteerVacancy); ok {
		r0 = rf(volunteerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bookmark.VolunteerVacancy)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(volunteerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

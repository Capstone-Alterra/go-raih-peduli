// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	dtos "raihpeduli/features/volunteer/dtos"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	volunteer "raihpeduli/features/volunteer"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CheckUser provides a mock function with given fields: userID
func (_m *Repository) CheckUser(userID int) bool {
	ret := _m.Called(userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteFile provides a mock function with given fields: filename
func (_m *Repository) DeleteFile(filename string) error {
	ret := _m.Called(filename)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVacancyByID provides a mock function with given fields: vacancyID
func (_m *Repository) DeleteVacancyByID(vacancyID int) error {
	ret := _m.Called(vacancyID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(vacancyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUserInVacancy provides a mock function with given fields: vacancyID, userID
func (_m *Repository) FindUserInVacancy(vacancyID int, userID int) bool {
	ret := _m.Called(vacancyID, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(vacancyID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetTotalDataVacancies provides a mock function with given fields:
func (_m *Repository) GetTotalDataVacancies() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetTotalDataVacanciesBySearchAndFilter provides a mock function with given fields: searchAndFilter
func (_m *Repository) GetTotalDataVacanciesBySearchAndFilter(searchAndFilter dtos.SearchAndFilter) int64 {
	ret := _m.Called(searchAndFilter)

	var r0 int64
	if rf, ok := ret.Get(0).(func(dtos.SearchAndFilter) int64); ok {
		r0 = rf(searchAndFilter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetTotalDataVacanciesBySearchAndFilterMobile provides a mock function with given fields: searchAndFilter
func (_m *Repository) GetTotalDataVacanciesBySearchAndFilterMobile(searchAndFilter dtos.SearchAndFilter) int64 {
	ret := _m.Called(searchAndFilter)

	var r0 int64
	if rf, ok := ret.Get(0).(func(dtos.SearchAndFilter) int64); ok {
		r0 = rf(searchAndFilter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetTotalDataVacanciesMobile provides a mock function with given fields:
func (_m *Repository) GetTotalDataVacanciesMobile() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetTotalVolunteers provides a mock function with given fields: vacancyID, name
func (_m *Repository) GetTotalVolunteers(vacancyID int, name string) int64 {
	ret := _m.Called(vacancyID, name)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int, string) int64); ok {
		r0 = rf(vacancyID, name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetTotalVolunteersByVacancyID provides a mock function with given fields: vacancyID
func (_m *Repository) GetTotalVolunteersByVacancyID(vacancyID int) int64 {
	ret := _m.Called(vacancyID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int) int64); ok {
		r0 = rf(vacancyID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// InsertVacancy provides a mock function with given fields: _a0
func (_m *Repository) InsertVacancy(_a0 *volunteer.VolunteerVacancies) (*volunteer.VolunteerVacancies, error) {
	ret := _m.Called(_a0)

	var r0 *volunteer.VolunteerVacancies
	var r1 error
	if rf, ok := ret.Get(0).(func(*volunteer.VolunteerVacancies) (*volunteer.VolunteerVacancies, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*volunteer.VolunteerVacancies) *volunteer.VolunteerVacancies); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*volunteer.VolunteerVacancies)
		}
	}

	if rf, ok := ret.Get(1).(func(*volunteer.VolunteerVacancies) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Paginate provides a mock function with given fields: page, size, searchAndFilter
func (_m *Repository) Paginate(page int, size int, searchAndFilter dtos.SearchAndFilter) []volunteer.VolunteerVacancies {
	ret := _m.Called(page, size, searchAndFilter)

	var r0 []volunteer.VolunteerVacancies
	if rf, ok := ret.Get(0).(func(int, int, dtos.SearchAndFilter) []volunteer.VolunteerVacancies); ok {
		r0 = rf(page, size, searchAndFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]volunteer.VolunteerVacancies)
		}
	}

	return r0
}

// PaginateMobile provides a mock function with given fields: page, size, searchAndFilter
func (_m *Repository) PaginateMobile(page int, size int, searchAndFilter dtos.SearchAndFilter) []volunteer.VolunteerVacancies {
	ret := _m.Called(page, size, searchAndFilter)

	var r0 []volunteer.VolunteerVacancies
	if rf, ok := ret.Get(0).(func(int, int, dtos.SearchAndFilter) []volunteer.VolunteerVacancies); ok {
		r0 = rf(page, size, searchAndFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]volunteer.VolunteerVacancies)
		}
	}

	return r0
}

// RegisterVacancy provides a mock function with given fields: registrar
func (_m *Repository) RegisterVacancy(registrar *volunteer.VolunteerRelations) error {
	ret := _m.Called(registrar)

	var r0 error
	if rf, ok := ret.Get(0).(func(*volunteer.VolunteerRelations) error); ok {
		r0 = rf(registrar)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectBookmarkByVacancyAndOwnerID provides a mock function with given fields: vacancyID, ownerID
func (_m *Repository) SelectBookmarkByVacancyAndOwnerID(vacancyID int, ownerID int) string {
	ret := _m.Called(vacancyID, ownerID)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(vacancyID, ownerID)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SelectBookmarkedVacancyID provides a mock function with given fields: ownerID
func (_m *Repository) SelectBookmarkedVacancyID(ownerID int) (map[int]string, error) {
	ret := _m.Called(ownerID)

	var r0 map[int]string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (map[int]string, error)); ok {
		return rf(ownerID)
	}
	if rf, ok := ret.Get(0).(func(int) map[int]string); ok {
		r0 = rf(ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectRegistrarByID provides a mock function with given fields: registrarID
func (_m *Repository) SelectRegistrarByID(registrarID int) *volunteer.VolunteerRelations {
	ret := _m.Called(registrarID)

	var r0 *volunteer.VolunteerRelations
	if rf, ok := ret.Get(0).(func(int) *volunteer.VolunteerRelations); ok {
		r0 = rf(registrarID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*volunteer.VolunteerRelations)
		}
	}

	return r0
}

// SelectVacancyByID provides a mock function with given fields: vacancyID
func (_m *Repository) SelectVacancyByID(vacancyID int) *volunteer.VolunteerVacancies {
	ret := _m.Called(vacancyID)

	var r0 *volunteer.VolunteerVacancies
	if rf, ok := ret.Get(0).(func(int) *volunteer.VolunteerVacancies); ok {
		r0 = rf(vacancyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*volunteer.VolunteerVacancies)
		}
	}

	return r0
}

// SelectVolunteerDetails provides a mock function with given fields: vacancyID, volunteerID
func (_m *Repository) SelectVolunteerDetails(vacancyID int, volunteerID int) *volunteer.Volunteer {
	ret := _m.Called(vacancyID, volunteerID)

	var r0 *volunteer.Volunteer
	if rf, ok := ret.Get(0).(func(int, int) *volunteer.Volunteer); ok {
		r0 = rf(vacancyID, volunteerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*volunteer.Volunteer)
		}
	}

	return r0
}

// SelectVolunteersByVacancyID provides a mock function with given fields: vacancyID, name, page, size
func (_m *Repository) SelectVolunteersByVacancyID(vacancyID int, name string, page int, size int) []volunteer.Volunteer {
	ret := _m.Called(vacancyID, name, page, size)

	var r0 []volunteer.Volunteer
	if rf, ok := ret.Get(0).(func(int, string, int, int) []volunteer.Volunteer); ok {
		r0 = rf(vacancyID, name, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]volunteer.Volunteer)
		}
	}

	return r0
}

// UpdateStatusRegistrar provides a mock function with given fields: registrar
func (_m *Repository) UpdateStatusRegistrar(registrar volunteer.VolunteerRelations) int64 {
	ret := _m.Called(registrar)

	var r0 int64
	if rf, ok := ret.Get(0).(func(volunteer.VolunteerRelations) int64); ok {
		r0 = rf(registrar)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// UpdateVacancy provides a mock function with given fields: vacancy
func (_m *Repository) UpdateVacancy(vacancy volunteer.VolunteerVacancies) int64 {
	ret := _m.Called(vacancy)

	var r0 int64
	if rf, ok := ret.Get(0).(func(volunteer.VolunteerVacancies) int64); ok {
		r0 = rf(vacancy)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// UploadFile provides a mock function with given fields: file, objectName
func (_m *Repository) UploadFile(file multipart.File, objectName string) (string, error) {
	ret := _m.Called(file, objectName)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(multipart.File, string) (string, error)); ok {
		return rf(file, objectName)
	}
	if rf, ok := ret.Get(0).(func(multipart.File, string) string); ok {
		r0 = rf(file, objectName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(multipart.File, string) error); ok {
		r1 = rf(file, objectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
